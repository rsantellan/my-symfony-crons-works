<?php

/**
 * Baseprogenitor
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $nombre
 * @property string $direccion
 * @property string $telefono
 * @property string $celular
 * @property string $mail
 * @property string $clave
 * @property integer $md_user_id
 * @property mdUser $mdUser
 * @property Doctrine_Collection $hijos
 * @property Doctrine_Collection $usuario_progenitor
 * @property Doctrine_Collection $cuentapadre
 * 
 * @method integer             getId()                 Returns the current record's "id" value
 * @method string              getNombre()             Returns the current record's "nombre" value
 * @method string              getDireccion()          Returns the current record's "direccion" value
 * @method string              getTelefono()           Returns the current record's "telefono" value
 * @method string              getCelular()            Returns the current record's "celular" value
 * @method string              getMail()               Returns the current record's "mail" value
 * @method string              getClave()              Returns the current record's "clave" value
 * @method integer             getMdUserId()           Returns the current record's "md_user_id" value
 * @method mdUser              getMdUser()             Returns the current record's "mdUser" value
 * @method Doctrine_Collection getHijos()              Returns the current record's "hijos" collection
 * @method Doctrine_Collection getUsuarioProgenitor()  Returns the current record's "usuario_progenitor" collection
 * @method Doctrine_Collection getCuentapadre()        Returns the current record's "cuentapadre" collection
 * @method progenitor          setId()                 Sets the current record's "id" value
 * @method progenitor          setNombre()             Sets the current record's "nombre" value
 * @method progenitor          setDireccion()          Sets the current record's "direccion" value
 * @method progenitor          setTelefono()           Sets the current record's "telefono" value
 * @method progenitor          setCelular()            Sets the current record's "celular" value
 * @method progenitor          setMail()               Sets the current record's "mail" value
 * @method progenitor          setClave()              Sets the current record's "clave" value
 * @method progenitor          setMdUserId()           Sets the current record's "md_user_id" value
 * @method progenitor          setMdUser()             Sets the current record's "mdUser" value
 * @method progenitor          setHijos()              Sets the current record's "hijos" collection
 * @method progenitor          setUsuarioProgenitor()  Sets the current record's "usuario_progenitor" collection
 * @method progenitor          setCuentapadre()        Sets the current record's "cuentapadre" collection
 * 
 * @package    jardin
 * @subpackage model
 * @author     Rodrigo Santellan
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class Baseprogenitor extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('progenitor');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('nombre', 'string', 64, array(
             'type' => 'string',
             'length' => 64,
             ));
        $this->hasColumn('direccion', 'string', 128, array(
             'type' => 'string',
             'length' => 128,
             ));
        $this->hasColumn('telefono', 'string', 128, array(
             'type' => 'string',
             'length' => 128,
             ));
        $this->hasColumn('celular', 'string', 64, array(
             'type' => 'string',
             'length' => 64,
             ));
        $this->hasColumn('mail', 'string', 64, array(
             'type' => 'string',
             'length' => 64,
             ));
        $this->hasColumn('clave', 'string', 64, array(
             'type' => 'string',
             'length' => 64,
             ));
        $this->hasColumn('md_user_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));


        $this->index('mail_index', array(
             'fields' => 
             array(
              0 => 'mail',
             ),
             'type' => 'unique',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('mdUser', array(
             'local' => 'md_user_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('usuario as hijos', array(
             'refClass' => 'usuario_progenitor',
             'local' => 'progenitor_id',
             'foreign' => 'usuario_id'));

        $this->hasMany('usuario_progenitor', array(
             'local' => 'id',
             'foreign' => 'progenitor_id'));

        $this->hasMany('cuentapadre', array(
             'local' => 'id',
             'foreign' => 'progenitor_id'));
    }
}