<?php

/**
 * PluginmdMediaContent
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class PluginmdMediaContent extends BasemdMediaContent
{
    /**
     * Identificador del usuario
     * @var <integer>
     */
    public $mdUserIdTmp = 0;

    /**
     * sin uso
     * @var <integer>
     */
    public $mdNameSpaceIdTmp = 0;

    /**
     * objeto concreto al cual referencia el mdMediaContent
     * @var <object>
     */
    private $object = null;

    
    /*public function preDelete($event)
    {
        //Elimino el contenido de todos los albums en los que este
        foreach($this->getMdMediaAlbumContent() as $mdMediaContentAlbum){
            $mdMediaAlbum = $mdMediaContentAlbum->getMdMediaAlbum();
            $mdMediaContentAlbum->delete();
            if($mdMediaAlbum->getMdMediaContentId() == $this->getId())
            { //si es el avatar
                $contentIds = mdMediaAlbum::retrieveContentIds($mdMediaAlbum->getId());
                $contentId = (count($contentIds) > 0 ? $contentIds[0] : NULL);
                $mdMediaAlbum->setMdMediaContentId($contentId);
                $mdMediaAlbum->save();
            }
        }

        $object = $this->retrieveObject();

        //Eliminar mdMediaContent del cache
        if(sfConfig::get('sf_driver_cache'))
        {
            $manager = Doctrine_Manager::getInstance()->getAttribute(Doctrine_Core::ATTR_RESULT_CACHE);
            $key = sfConfig::get('sf_root_dir').  '_md_media_content_' . $this->getId();
            $manager->delete($key);
            $key = sfConfig::get('sf_root_dir') . '_md_media_content_' . $object->getObjectClass() . '-' . $object->getId();
            $manager->delete($key);
        }

        $object->delete();
    }*/

    //Metodos Publicos

    /*public function delete($event)
    {
      $objectConcrete = $this->retrieveObject();
      if($objectConcrete)
      {
        $objectConcrete->delete();
      }
      else
      {
        parent::delete($event);
      }
      
    }
*/
/*    public function postDelete($event)
    {
      if(class_exists("mdNewsfeedUserHandler"))
      {
        mdNewsfeedUserHandler::deleteObjectNewsFeeds($this->getId(), $this->getObjectClass()); 
      }
    } 
*/  
    /**
     * Devuelve el nombre de la clase: mdMediaContent
     * @return <type>
     */
    public function getObjectClass()
    {
        return get_class($this);
    }

    /**
     * Devuelve el objeto al que hace referencia el mdMediaContent
     * @return <mdMediaImage | mdMediaFile | mdMediaVideo>
     */
    public function retrieveObject()
    {
        if ($this->object == NULL)
        {
            $this->object = Doctrine::getTable($this->getObjectClassName())->retrieveObject($this->getObjectId());
        }
        return $this->object;
    }

    public static function retrieveCreatedAt($concreteObject)
    {
        $mdMediaContent = Doctrine::getTable("mdMediaContent")->retrieveByObject($concreteObject);
        return $mdMediaContent->retrieveMdContent()->getCreatedAt();
    }
    
    public function getOwnerIdForILikeIt()
    {
      return $this->retrieveMdContent()->getMdUserId();
    }
    
    public function getOwnerIdForAbuseReport()
    {
      return $this->retrieveMdContent()->getMdUserId();
    }    
}
