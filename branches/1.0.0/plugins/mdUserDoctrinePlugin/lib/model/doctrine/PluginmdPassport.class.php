<?php

/**
 * PluginmdPassport
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class PluginmdPassport extends BasemdPassport
{
    const INVALID_USER = 100;
    const INVALID_PASSWORD = 101;
    const INVALID_PASSPORT = 102;
    const NOT_ACTIVE = 103;
    const NOT_REQUIERED_GROUPS = 104;
    const BLOCKED = 105;
    
    protected $_groups = null;
    protected $_permissions = null;
    protected $_allPermissions = null;
    protected $defaultImage = null;
    protected $_md_user = null;
    protected $tmp_md_application_list = null;

    public function __toString() {
        return $this->getName();
    }

		public function retrieveMdUser(){
			if(!is_null($this->_md_user)) return $this->_md_user;
			$this->_md_user = $this->retrieveBaseMdUser();
			return $this->_md_user;
		}

		private function retrieveBaseMdUser(){
			return Doctrine::getTable('mdUser')->retrieveMdUserById($this->getMdUserId());
		}
		
		public static function retrieveLoadedMdPassportForSession($id)
		{
			$mdPassport = Doctrine::getTable('mdPassport')->find($id);
			$mdPassport->retrieveMdUser();
			return $mdPassport;
		
			
		}
    /**
     * @param $tmp_md_application_list the $tmp_md_application_list to set
     */
    /*public function setTmpMdApplicationList($tmp_md_application_list) {
        $this->tmp_md_application_list = $tmp_md_application_list;
    }*/

    /**
     * @return the $tmp_md_application_list
     */
    /*public function getTmpMdApplicationList() {
        return $this->tmp_md_application_list;
    }*/


		/**
     * Chequea que no exista un mdUserContent para el mdUser de dicho email
     *
     * @return void
     * @author maui .- |
     * */
    static public function checkEmailAsUnique($email) {
        //TODO Fix check email as unique method
        throw new Exception('Check email', 100);
        $mdUser = Doctrine::getTable('mdUser')->retrieveMdUserByEmail($email);
        if ($mdUser) {
            $mdUserContent = mdUserContent::retrieveMdUserContentByMdUserId($mdUser->getId());
            if ($mdUserContent) {
                return false;
            }
        }
        return true;
    }

    /**
     * Chequea que el usuario sea unico.
     * 
     * @param String $user
     * @return boolean
     * @author Rodrigo Santellan
     */
    public static function checkUsernameAsUnique($user) {
        $mdPassport = Doctrine::getTable('mdPassport')->findOneBy('username', $user);
        if ($mdPassport) {
            return false;
        }
        return true;
    }


    /**
     * Return the class of this object
     *
     * @return String
     * @author Rodrigo Santellan
     */
    public function getObjectClass() {
        return get_class($this);
    }

    /**
     * Checks if a user is logued
     *
     * @param string $user
     * @param string $pass
     * @return mdUserContent in case that exists and null otherwise
     * @author Rodrigo Santellan
     */
    public static function getCheckedPassportByUserOrPassword($user, $pass) {
        $mdPassport = new mdPassport ();

        //Dependiendo si el usuario ingreso el mail o el nombre obtengo el mdUserContent
        if (mdBasicFunction::validEmail($user)) {
            $mdUser = Doctrine::getTable('mdUser')->retrieveMdUserByEmail($user);
            if ($mdUser) {
                $mdPassport = Doctrine::getTable('mdPassport')->retrieveMdPassportByUserId($mdUser->getId());
            } else {
							$i18n = sfContext::getInstance()->getI18n();
              throw new Exception($i18n->__('mdUserDoctrine_error Invalid User'), self::INVALID_USER);
            }
        } else {
            $mdPassport = Doctrine::getTable('mdPassport')->retrieveMdPassportByUserName($user);
        }



        if ($mdPassport) { //Valido que el pass este bien
            //$as = new mdPassport();

            if (!$mdPassport->getAccountActive() && !$mdPassport->isSuperAdmin()) {
							if (!$mdPassport->isActive()) {
									$i18n = sfContext::getInstance()->getI18n();
						      throw new Exception($i18n->__('mdUserDoctrine_error User Not Active'), self::NOT_ACTIVE);
                }
            }
            if ($mdPassport->getAccountBlocked() && !$mdPassport->isSuperAdmin()) {
							if (!$mdPassport->isActive()) {
									$i18n = sfContext::getInstance()->getI18n();
						      throw new Exception($i18n->__('mdUserDoctrine_error User Is Blocked'), self::BLOCKED);
                }
            }
            if ($mdPassport->getPassword() === md5($pass)) {
                if( sfConfig::get( 'sf_plugins_user_groups_permissions', false ) )
                {
                    if(!$mdPassport->isSuperAdmin())
                    {
                        self::checkIfMdPassportHaveBackendGroups($mdPassport->getId());
                    }
                }
                return $mdPassport;
            } else {
								$i18n = sfContext::getInstance()->getI18n();
	              throw new Exception($i18n->__('mdUserDoctrine_error Invalid Password'), self::INVALID_PASSWORD);
            }
        } else {
						$i18n = sfContext::getInstance()->getI18n();
	          throw new Exception($i18n->__('mdUserDoctrine_error Invalid Passport'), self::INVALID_PASSPORT);
        }
    }

    private static function checkIfMdPassportHaveBackendGroups($mdPassportId)
    {
        $mdBackendGroupsXMLHandler;
        try
        {
            $mdBackendGroupsXMLHandler = new mdBackendGroupsXMLHandler();
        }
        catch(Exception $e)
        {
            return true;
        }
        $mdGroups = mdGroupHandler::retrieveAllMdGroupsOfMdPassport($mdPassportId);
        
        foreach($mdBackendGroupsXMLHandler->retrieveBackendGroupList() as $key => $group)
        {
            $found = false;
            $index = 0;

            while(!$found && $index < count($mdGroups))
            {
                $auxGroup = $mdGroups[$index];
                if($auxGroup->getId() == $key)
                {
                    $found = true;
                }
                $index++;
            }
            if(!$found)
            {
							$i18n = sfContext::getInstance()->getI18n();
              throw new Exception($i18n->__('mdUserDoctrine_error Not Requiered Groups'), self::NOT_REQUIERED_GROUPS);
            }
         }
         return $found;
    }

    public function isUserOfBackend()
    {
      $response = true;
      if( sfConfig::get( 'sf_plugins_user_groups_permissions', false ) )
      {
          if(!$this->isSuperAdmin())
          {
             try
             {
              $response = self::checkIfMdPassportHaveBackendGroups($this->getId());
             }
             catch(Exception $e)
             {
               $response = false;
             }
          }
      }
      
      return $response;
    }

    public function isActive() {
        $time = sfConfig::get('app_confirmation_mail_time', 0);
        $time = 24 * 3600 * $time; //paso dias a segundos
        $createdAt = mdBasicFunction::convert_datetime($this->getCreatedAt());
        $now = time();
        $delta = $now - $createdAt;
        if ($now - $createdAt > $time) {
            return false;
        } else {
            return true;
        }
    }

		public function isOnWindowPeriod(){
            $time = sfConfig::get('app_confirmation_mail_time', 0);
            $time = 24 * 3600 * $time; //paso dias a segundos
            $createdAt = mdBasicFunction::convert_datetime($this->getCreatedAt());
            $now = time();
            if ($now - $createdAt < $time) 
            {
                return false;
            } 
            else 
            {
                return true;
            }			
		}
    /**
     * In case that the user exists should be send a email and not save a new user.
     * In case is new should do md5 to the password.
     * (non-PHPdoc)
     * @see vendor/doctrine/Doctrine/Doctrine_Record#save($conn)
     */
    public function save(Doctrine_Connection $conn = null) {
        if (!$this->getId()) {
            if($this->getPassword() == "")
            {
                $this->setPassword(md5(mdBasicFunction::createRandomPassword()));
            }
            else
            {
                $this->setPassword(md5($this->getPassword()));
            }
            

        }

        if(sfConfig::get('sf_driver_cache'))
        {
            Doctrine::getTable('mdPassport')->removeCacheByKey('_retrieveMdPassportByUserId_'.$this->getMdUserId());
            Doctrine::getTable('mdPassport')->removeCacheByKey('_retrieveMdPassportByUserName_');
        }

        return parent::save($conn);
    }


    public function postSave($event)
    {
        mdUserSearchHandler::saveMdPassport($this);
        mdUserBlockedHandler::changeBlockedStatus($this->getMdUserId(), $this->getAccountBlocked());
    }

		public function delete(Doctrine_Connection $conn = null) {
			if(sfConfig::get('sf_driver_cache'))
      {
				Doctrine::getTable('mdPassport')->removeCacheByKey('_retrieveMdPassportByUserId_'.$this->getMdUserId());
				Doctrine::getTable('mdPassport')->removeCacheByKey('_retrieveMdPassportByUserName_');
			}
			return parent::delete($conn);
		}

    /**
     * Reset and save an md5 password
     * @return true
     * @author Rodrigo Santellan
     */
    public function resetPassword($change_password = false) {
        if($change_password)
        {
          $this->setPassword(md5(mdBasicFunction::createRandomPassword ()));
          $this->save();
        }
        return true;
    }

    /**
     * Save the new password in md5 format
     * @param string $password
     * @return boolean
     * @author Rodrigo Santellan
     */
    public function changePassword($password) {
        $this->setPassword(md5($password));
        $this->save();
        return true;
    }

    /**
     * Save the new password in md5 format
     * @param string $password
     * @return boolean
     * @author Rodrigo Santellan
     */
    public function validatePassword($password) {
        if($this->getPassword() == md5($password))
        {
          return true;
        }
        else
        {
          return false;
        }
    }
        
    /**
     * Returns an array containing all permissions, including groups permissions
     * and single permissions.
     *
     * @return array
     * @author Gaston Caldeiro (Multi Aplicacion) || Rodrigo Santellan (Mono aplicacion)
     */
    private function getAllPermissions() {
      if (!$this->_allPermissions)
      {
        $this->_allPermissions = array();
        foreach ($this->getMdPassportGroup() as $mdPassportGroup)
        {
          foreach ($mdPassportGroup->getMdGroup()->getPermissions() as $permission)
          {
            $this->_allPermissions[$permission->getName()] = $permission;
          }
        }
        
      }
      return $this->_allPermissions;
    }

    /*
    private function loadAllPermissionOfAllApplications() {
        $this->getAllPermissions($app->getName());
        return $this->_allPermissions;
    }
    */
    
    public function retrieveAllPermissions() {
        $return = array();
        $this->getAllPermissions();
        foreach ($this->_allPermissions as $key => $value) {
            foreach ($value as $permission) {
                array_push($return, $permission);
            }
        }
        return $return;
    }

    /**
     * Returns an array of all permission names.
     *
     * @return array
     * @author Rodrigo Santellan
     */
    public function getAllPermissionNames($appName) {
        return array_keys($this->getAllPermissions($appName));
    }

    /**
     * Returns an array of all permission id
     *
     * @return array
     * @author Rodrigo Santellan
     */
    public function getAllPermissionIds() {
        $return = array();
        $this->getAllPermissions();
        foreach ($this->_allPermissions as $key => $value) {
            foreach ($value as $permission) {
                array_push($return, $permission->getId());
            }
        }
        return $return;
    }

    /**
     * Returns whether or not the user has the given permission.
     *
     * @return boolean
     * @author Rodrigo Santellan
     */
    public function hasPermission($name) {
        if ($this->isSuperAdmin())
            return true;
        $this->loadGroupsAndPermissions();
        return isset($this->_allPermissions[$name]);
    }


    private function getAllGroups()
    {
      if (!$this->_groups)
      {
        $this->_groups = array();
        foreach ($this->getMdPassportGroup() as $mdPassportGroup)
        {
          $this->_groups[$mdPassportGroup->getMdGroup()->getName()] = $mdPassportGroup->getMdGroup()->getName();
        }

      }
      return $this->_groups;
    }

    /**
     * Loads the user's groups and permissions.
     *
     * @author Gaston Caldeiro || Rodrigo Santellan
     */
    public function loadGroupsAndPermissions() {
        $this->getAllPermissions();
        $this->getAllGroups();
    }

    /**
     * Checks whether or not the user belongs to the given group.
     *
     * @param string $name The group name
     * @return boolean
     * @author Rodrigo Santellan
     */
    public function hasGroup($name) {
        if ($this->isSuperAdmin())
            return true;
        
        $this->loadGroupsAndPermissions();
        return isset($this->_groups[$name]);
    }

    /**
     * Returns the profile of the given application
     * @param int $app application name
     * @return mdUserProfile
     * @author Rodrigo Santellan
     */
    public function getMdUserProfile() {
        return mdUserProfile::retrieveByMdUserId($this->getMdUserId());
    }

    public function getProfileOfMdApplication($mdApp){
        $mdProfile = new mdUserProfile();
        return $mdProfile->getProfileOfMdApp($mdApp, $this->getMdUser()->getId());
    }
    /**
     * Returns the mdUserContent default image for the user
     * @return String
     * @author Rodrigo Santellan
     */
    public function getDefaultImage() {
        //TODO Change to the new logic.
        throw new Exception('Change to new logic', 102);
        if (!is_null($this->defaultImage))
            return $this->defaultImage;
        $mdContent = Doctrine::getTable('mdContent')->retrieveByObject($this);
        $this->defaultImage = mdMedia::getDefault($mdContent->getId());
        return $this->defaultImage;
    }

    /**
     * Return an array of the id of all the applications
     * @param string $name of the permission
     * @return array
     * @author Rodrigo Santellan
     */
    public function getAplicationsOfPermission($name) {
        throw new Exception('Old logic for profile', 102);
        if ($this->isSuperAdmin()) {
            return Doctrine::getTable('mdApplication')->findAll();
        } else {
            $mdApplications = array();
            $mdPassportGroupApplications = Doctrine::getTable('mdPassportGroup')->findBy('md_passport_id', $this->getId());
            foreach ($mdPassportGroupApplications as $mdPassportGroupApplication) {
                $mdGroup = $mdPassportGroupApplication->getMdGroup();
                if ($mdGroup->hasPermission($name)) {
                    $mdApplications[] = $mdPassportGroupApplication->getMdApplication();
                }
            }
            return $mdApplications;
        }
    }

    /**
     * Returns true if the mdPassport have the given application
     * @param $appName
     * @return unknown_type
     */
    public function isAllowedInApplication($appName) {
        //if($this->isSuperAdmin()) return true;
        $app = Doctrine::getTable('mdApplication')->findOneBy('name', $appName);
        $passPortApplication = Doctrine::getTable('mdPassportApplication')->find(array($this->getId(), $app->getId()));
        if ($passPortApplication) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Returns all the applications that the mdContent belong
     * @return Doctrine_Collection
     * @author Rodrigo Santellan
     */
    public function getMyApplications() {

        $list = array();
        foreach ($this->getMdPassportApplication() as $mdCA) {
            array_push($list, $mdCA->getMdApplication());
        }
        return $list;
    }

    /**
     * Returns whether or not the user is a super admin.
     *
     * @return boolean
     * @author Rodrigo Santellan
     */
    public function isSuperAdmin() {
        return $this->retrieveMdUser()->getSuperAdmin();
    }

    /**
     * Obtiene todos los grupos de una aplicacion.
     * @param String $appName nombre de la aplicacion
     * @return Array
     * @author Rodrigo Santellan
     */
    public function getApplicationGroups($appName) {
        $this->loadGroupsAndPermissions($appName);
        return $this->_groups[$appName];
    }

    /**
     * Retorna si un pasaporte tiene o no una aplicacion
     * @param int $mdApplicationId mdApplicaction id
     * @return Boolean
     * @author Rodrigo Santellan
     */
    public function hasApplication($mdApplicationId) {
        $mdPassportMdApplication = Doctrine::getTable('mdPassportApplication')->retrieveMdPassportMdApplication($this->getId(), $mdApplicationId);
        if ($mdPassportMdApplication) {
            return true;
        }
        return false;
    }

    /**
     * Le quita la aplicacion a un mdPassport
     * @param int $mdApplicationId mdApplicaction id
     * @return Boolean
     * @author Rodrigo Santellan
     */
    public function removeApplication($mdApplicationId) {
        $mdPassportMdApplication = Doctrine::getTable('mdPassportApplication')->retrieveMdPassportMdApplication($this->getId(), $mdApplicationId);
        if ($mdPassportMdApplication) {
            $mdPassportMdApplication->delete();
            return true;
        }
        return false;
    }

    public static function validateUserName($username) {
        $multipleAplication = sfConfig::get('app_multiple_active', false);
        if (!$multipleAplication) {
            $mdPassport = Doctrine::getTable('mdPassport')->findOneby('username', $username);
            if ($mdPassport) {
                throw new Exception("A user exists with that username", 130);
            }
        }
    }

}
