<?php

/**
 * cuenta
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    jardin
 * @subpackage model
 * @author     Rodrigo Santellan
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class cuenta extends Basecuenta
{
  public function preSave($event) {
    $this->setDiferencia($this->getDebe() - $this->getPago());
    parent::preSave($event);
  }
  
  public function getFormatedDiferencia()
  {
    if($this->getDiferencia() < 0)
    {
      return number_format(- $this->getDiferencia(), 0, ',', '.');
    }
    return number_format($this->getDiferencia(), 0, ',', '.');
  }

  public static function exportCobroToPdf($cobro, $cuenta = NULL, $location = NULL)
  {
    if($cuenta === NULL){
      $cuenta = $cobro->getCuenta();
    }
    $alumnos = "";
    $apellido = "";
    foreach($cuenta->getCuentausuario() as $cuentaUsuario)
    {
      $alumnos .= $cuentaUsuario->getUsuario()->getNombre() . ",";
      $apellido = $cuentaUsuario->getUsuario()->getApellido();
    }
    $alumnos =  rtrim($alumnos, ',');
    
    $padres = "";
    foreach($cuenta->getCuentapadre() as $cuentaPadre)
    {
      $padres .= $cuentaPadre->getProgenitor()->getNombre() . " ". ",";
    }
    $padres = rtrim($padres, ',');
    $pdf = new PDF_Invoice( 'P', 'mm', 'A4' );
    
    $pdf->AddPage();
    $pdf->addSociete( "", "");
    $pdf->temporaire( "Bunny's Kinder" );
    $pdf->addDate( date('d/m/Y'));
    $pdf->addClient($cuenta->getReferenciabancaria());
    $pdf->addAlumnos(utf8_decode($alumnos));
    $pdf->addPadres(utf8_decode($padres));
    $cols=array( 'Item'  => 30,
                utf8_decode(html_entity_decode("Descripci&oacute;n"))    => 130,
                 "Precio"  => 30
                );
    $pdf->addCols( $cols);
    $cols=array( 'Item'  => 'C',
                utf8_decode(html_entity_decode("Descripci&oacute;n"))    => "C",
                 "Precio"  => "C"
                 );
    $pdf->addLineFormat($cols);
    $y    = 70;
    $size = 0;
    $counterItems = 1;
    $line = array(
            'Item' => $counterItems,
            utf8_decode(html_entity_decode("Descripci&oacute;n"))    => sprintf('Pago en la fecha: %s', $cobro->getFecha()),
           "Precio"  => '$'.$cobro->getFormatedMonto()
    );
    $size = $pdf->addLine( $y, $line );
    $y   += $size + 2;
    
    $pdf->addCadreEurosFrancs('$ '.$cobro->getFormatedMonto());
    $outputOption = 'I';
    if($location !== null)
    {
      if(!is_dir($location))
      {
        $location = sys_get_temp_dir();
      }
      $outputOption = 'F';
      $location .= DIRECTORY_SEPARATOR;
    }
    else 
    {
      $location = '';
    }
    $outputName = sprintf('Pago-cuenta-%s-%s.pdf',$cuenta->getReferenciabancaria(), date('m-Y'));
    $pdf->Output($location.$outputName, $outputOption);
    if($outputOption == 'F')
    {
      return $location.$outputName;
    }
    die(0);
  }
  
  // sys_get_temp_dir()
  public static function exportToPdf($cuenta, $location = NULL)
  {
//    error_reporting(E_ALL);
    //$cuenta = Doctrine::getTable('cuenta')->find($accountId);
    $facturas = Doctrine::getTable('facturaFinal')->retrieveAllUnpaidFromAccountId($cuenta->getId(), 'asc');
    $alumnos = "";
    $apellido = "";
    foreach($cuenta->getCuentausuario() as $cuentaUsuario)
    {
      $alumnos .= $cuentaUsuario->getUsuario()->getNombre() . ",";
      $apellido = $cuentaUsuario->getUsuario()->getApellido();
    }
    $alumnos =  rtrim($alumnos, ',');
    
    $padres = "";
    foreach($cuenta->getCuentapadre() as $cuentaPadre)
    {
      $padres .= $cuentaPadre->getProgenitor()->getNombre() . " ". ",";
    }
    $padres = rtrim($padres, ',');
    
    $pdf = new PDF_Invoice( 'P', 'mm', 'A4' );
    $cantidadFacturas = count($facturas);
    $cantidadFacturasDetalles = 0;
    $facturasDetailList = array();
    $quantity = count($facturas);
    $meses = array("Enero","Febrero","Marzo","Abril","Mayo","Junio","Julio","Agosto","Septiembre","Octubre","Noviembre","Diciembre");
  //  var_dump($quantity);
    $montoAdeudado = 0;
    $lineDeuda = null;
    foreach($facturas as $factura)
    {
      if($factura->getYear() == date('Y') && $factura->getMonth() == date('m'))
      {
          foreach($factura->getFacturaFinalDetalle() as $facturaDetalle)
          {
            if($quantity > 1)
            {
              $description = sprintf("%s (%s %s)", $facturaDetalle->getDescription(), $meses[$factura->getMonth()-1], $factura->getYear());
              $facturaDetalle->setDescription($description);
            }
            //var_dump($facturaDetalle->getDescription());
            $facturasDetailList[$cantidadFacturasDetalles] = $facturaDetalle;
            $cantidadFacturasDetalles++;
          }
          if($quantity > 1)
          {
            $facturasDetailList[$cantidadFacturasDetalles] = new facturaFinalDetalle();
            $cantidadFacturasDetalles++;
          }
          if($montoAdeudado > 0)
          {
            $precion = number_format( 1 * (int)($montoAdeudado), 0, ',', '.');
            $texto = utf8_decode(html_entity_decode(sprintf('Monto adeudado al %s', date('m-Y'))));
            $lineDeuda = array(
                  'Item' => 1,
                  utf8_decode(html_entity_decode("Descripción"))    => $texto,
                 "Precio"  => '$'.$precion
          );    
          }
          
      }
      else
      {
          $montoAdeudado = $montoAdeudado + ($factura->getTotal() - $factura->getPagadodeltotal());
      }
      
    }
    $maxPerPage = 30;
    $cantidadPaginas = $cantidadFacturasDetalles / $maxPerPage;
    $showPages = true;
    if($cantidadPaginas < 1)
    {
      $showPages = false;
    }
    $cantidadFacturasDetalles = 0;
    $pagina = 1;
    $paymentQuantity = 0;
    //var_dump(count($facturasDetailList));
      //var_dump($cantidadPaginas >= 0);
      //var_dump($cantidadFacturasDetalles <= count($facturasDetailList));
    while($cantidadPaginas >= 0 && $cantidadFacturasDetalles <= count($facturasDetailList))
    {
      //var_dump('here 2121');
      $pdf->AddPage();
      if($showPages)
      {
        $pdf->addPageNumber($pagina);
      }
      
      $pdf->addSociete( "", "");
      $pdf->temporaire( "Bunny's Kinder" );
      $pdf->addDate( date('d/m/Y'));
      $pdf->addClient($cuenta->getReferenciabancaria());
      $pdf->addAlumnos(utf8_decode($alumnos));
      $pdf->addPadres(utf8_decode($padres));
      $cols=array( 'Item'  => 30,
                  utf8_decode(html_entity_decode("Descripción"))    => 130,
                   "Precio"  => 30
                  );
      $pdf->addCols( $cols);
      $cols=array( 'Item'  => 'C',
                  utf8_decode(html_entity_decode("Descripción"))    => "C",
                   "Precio"  => "C"
                   );
      $pdf->addLineFormat($cols);
      $y    = 70;
      $size = 0;
      $counterItems = 1;
//      $paymentQuantity = 0;
      if($lineDeuda !== null)
      {
        $size = $pdf->addLine( $y, $lineDeuda );
        $y   += $size + 2; 
        $counterItems++;   
      }
      

      //$cantidadFacturasDetalles++;
      
      while($cantidadFacturasDetalles <= $maxPerPage * $pagina && $cantidadFacturasDetalles < count($facturasDetailList))
      {
        $facturaDetalle = $facturasDetailList[$cantidadFacturasDetalles];
        if($facturaDetalle->getAmount() > 0 || $facturaDetalle->getAmount() < 0)
        {
            $precioShow = '$0';
            if($facturaDetalle->getAmount() > 0)
            {
                $precioShow = '$'.$facturaDetalle->getFormatedAmount();
            }
            else
            {
                $precioShow = '- $'.number_format( -1 * (int)($facturaDetalle->getAmount()), 0, ',', '.');
            }
            $line = array(
                'Item' => $counterItems,
                utf8_decode(html_entity_decode("Descripción"))    => utf8_decode($facturaDetalle->getDescription()),
               "Precio"  => $precioShow
            );
            $paymentQuantity = $paymentQuantity + $facturaDetalle->getAmount();
            $counterItems++;
        }
        else
        {
            $line = array(
                'Item' => '',
                utf8_decode(html_entity_decode("Descripción"))    => '',
               "Precio"  => ''
            );
        }
        
        $size = $pdf->addLine( $y, $line );
        $y   += $size + 2;

        $cantidadFacturasDetalles++;
      }
      $pagina++;
      $cantidadPaginas--;
    }
    if($cuenta->getDiferencia() - $paymentQuantity < 0)
    {
      $cobro = Doctrine::getTable('cobro')->retrieveLastFromAccount($cuenta->getId());
      $precion = number_format( -1 * (int)($cuenta->getDiferencia() - $paymentQuantity), 0, ',', '.');
      $fechaAux = explode('-', $cobro->getFecha() );
      $texto = utf8_decode(html_entity_decode(sprintf('Monto pagado (%s-%s-%s)', $fechaAux[2], $fechaAux[1] ,$fechaAux[0])));
      $line = array(
              'Item' => $counterItems,
              utf8_decode(html_entity_decode("Descripción"))    => $texto,
             "Precio"  => '- $'.$precion
      );
      
      $size = $pdf->addLine( $y, $line );
      $y   += $size + 2;
    }
    
        
    $pdf->addCadreEurosFrancs('$ '.$cuenta->getFormatedDiferencia());
    $outputOption = 'I';
    if($location !== null)
    {
      if(!is_dir($location))
      {
        $location = sys_get_temp_dir();
      }
      $outputOption = 'F';
      $location .= DIRECTORY_SEPARATOR;
    }
    else 
    {
      $location = '';
    }
//die('here');
    $outputName = sprintf('Cuenta-%s-%s.pdf',$cuenta->getReferenciabancaria(), date('m-Y'));
    $pdf->Output($location.$outputName, $outputOption);
    if($outputOption == 'F')
    {
      return $location.$outputName;
    }
    die(0);
  }
}
