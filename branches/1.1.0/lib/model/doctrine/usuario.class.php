<?php

/**
 * usuario
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    jardin
 * @subpackage model
 * @author     Gaston Caldeiro
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class usuario extends Baseusuario {

    private $total = 0;

    public function hasHermanos() {
        return (Doctrine::getTable('hermanos')->findByUsuarioFrom($this->getId())->count() > 0);
    }

    public function hasActividades() {
        return ($this->getUsuarioActividades()->count() > 0);
    }

    public static function exportar($ids) {
        sfContext::getInstance()->getConfiguration()->loadHelpers(array('Partial'));

        if (is_null($ids)) {
            $ids = Doctrine::getTable('usuario')->createQuery('u')->select('u.id')->orderBy('u.id')->limit(100)->execute(array(), Doctrine_Core::HYDRATE_SINGLE_SCALAR);
        }

        $usuarios = Doctrine::getTable('usuario')->createQuery('u')->whereIn('u.id', $ids)->execute();

        $html = get_partial('usuarios/export', array('usuarios' => $usuarios));
        $dom_pdf = new sfDomPDFPlugin($html);
        $dom_pdf->setBasePath(sfConfig::get('sf_web_dir'));
        $dom_pdf->getPDF()->render();
        $dom_pdf->getPDF()->stream("jardin-" . date('d-m-Y') . ".pdf");
    }

    public function calcularDescuento() {
        $discount = 0;

        $hermanos = Doctrine::getTable('hermanos')->findByUsuarioFrom($this->getId());
        $cant = $hermanos->count();

        $descuento = Doctrine::getTable('descuentos')->findOneByCantidadDeHermanos($cant);
        if ($descuento) {
            $discount = $descuento->getPorcentaje();
        }

        if (!is_null($this->getDescuento())) {
            $discount+= $this->getDescuento();
        }

        return $discount;
    }

    public function calculateBrothersDiscount()
    {
        $sql = "select count(*) as cantidad from hermanos where usuario_from = ? and usuario_to not in (select id from usuario where egresado = 1);";
        $q = Doctrine_Manager::getInstance()->getCurrentConnection();
        $hermanos_cantidad = $q->fetchRow($sql, array($this->getId()));
        $discount = 0;
        $descuento = Doctrine::getTable('descuentos')->findOneByCantidadDeHermanos($hermanos_cantidad['cantidad']);
        if ($descuento) {
            $discount = (int) $descuento->getPorcentaje();
        }
        return $discount;
    }
    
    public function retrieveBillingDescription()
    {
        $string = "Turno: ".$this->getHorario()."\r\n";
        foreach ($this->getActividades() as $actividad) {
            $string .= "Actividad: ".$actividad->getNombre()."\r\n";
        }
        return $string;
        
    }
    
    /**
     * Formula: total = ($cuota_mensual - $descuento) + $actividades + $billetera + (matricula si es Set u Oct)
     * @return float 
     */
    public function calcularTotal() {
        $this->total = costos::getCosto($this->getHorario());
        //(($this->getHorario() == 'matutino' || $this->getHorario() == 'vespertino') ? costos::getCosto($this->getHorario()) : costos::getCosto('doble_horario'));
        $this->_applyDiscount()->_applyActividades()->_applyImpuesto()->_applyBilletera()->_applyMatricula();
        return number_format($this->total, 2, '.', '');
    }

    public function _applyMatricula() {
        $mes_current = date('n');
        /*
        if ($mes_current == 9 || $mes_current == 10) {
            $this->total+= costos::getCosto('matricula') / 2;
        }
        */
        $this->total += $this->calculateMatricula($mes_current);
        return $this;
    }

    public function calculateMatricula($month)
    {
        return 0;
        $total = 0;
        if ($month == 9 || $month == 10) {
            $total = costos::getCosto('matricula') / 2;
        }
        return $total;
    }
    
    public function _applyDiscount() {
        $discount = $this->calcularDescuento();
        $this->total = ($this->total - ($this->total * $discount / 100));
        return $this;
    }

    public function _applyActividades() {
        
        $this->total+= $this->calculateActividades();
        return $this;
    }

    public function calculateActividades()
    {
        $actividades = $this->getActividades();
        $sum = 0;
        foreach ($actividades as $actividad) {
            $sum+= $actividad->getCosto();
        }
        return $sum;
    }
    
    public function _applyImpuesto() {
        $billetera = $this->getBilletera();
        if ($billetera) {
            $impuesto = $billetera->getImpuesto();
            $this->total = ($this->total + ($this->total * $impuesto / 100));
        }
        return $this;
    }

    public function _applyBilletera() {
        $billetera = $this->getBilletera();
        if ($billetera) {
            $this->total = $this->total - $billetera->getCredito() + $billetera->getDeuda();
        }
        return $this;
    }

    public function pagoMatricula($mes, $anio) {
        return Doctrine::getTable('pagos')->pagoCuota($mes, $anio, 'matricula', $this->getId());
    }

    public function getSaldo() {
        $billetera = $this->getBilletera();
        if ($billetera) {
            return number_format($billetera->getCredito() - $billetera->getDeuda(), 2, '.', '');
        }
        return 0;
    }

    public function pagar($price, $price_to_pay, $mes, $out_of_date) {
        $pago = new pagos();
        $pago->setUsuarioId($this->getId());
        $pago->setFecha(date('Y-m-d H:i:s'));
        $pago->setMes($mes);
        $pago->setPrice($price);
        $pago->setOutOfDate($out_of_date);
        $pago->save();

        // Actualizar billetera
        $billetera = $this->getBilletera();
        if (!$billetera) {
            $billetera = new billetera();
        }

        $billetera->setId($this->getId());
        $billetera->setCredito(($price > $price_to_pay ? ($price - $price_to_pay) : 0));
        $billetera->setDeuda(($price < $price_to_pay ? ($price_to_pay - $price) : 0));

        if ($out_of_date) {
            $billetera->setImpuesto(10);
        } else {
            $billetera->setImpuesto(0);
        }
        $billetera->save();

        if (is_null($this->getBilleteraId())) {
            $this->setBilleteraId($billetera->getId());
            $this->save();
        }
    }

    public static function deudores($mes, $anio) {
        return Doctrine::getTable('usuario')->getDeudores($mes, $anio);
    }

    public static function enviar($query) {
        $records = $query->execute();
        foreach ($records as $usuario) {
            $cuenta = Doctrine::getTable('cuenta')->findByUserId($usuario->getId());
            self::sendCuentaEmail($cuenta, $usuario);
        }
    }
    
    public static function sendCuentaEmail($cuenta, $usuario)
    {
      $title = sprintf('Talon de pago (%s/%s)', date('n'), date('Y'));//__('Mail_Talon de Pago');
      $mdMailXMLHandler = new mdMailXMLHandler();
      sfContext::getInstance()->getConfiguration()->loadHelpers(array('I18N', 'Partial'));
      $facturaPdf = cuenta::exportToPdf($cuenta, 'a');
      $body = get_partial('usuarios/newMailing', array('usuario' => $usuario, 'cuenta' => $cuenta));
      $email = $usuario->getProgenitoresMails();

      /*
        recipients	Destinatarios	Requerido Puede ser un string de emails separados por coma o un array de emails.
        sender		Emisor		Requerido (array) con 'name' y 'email'
        subject		Asunto		Requerido (string)
        body 		Cuerpo 		REQUERIDO (string)
        replyTo		Setea el replyTo(string) email . Default
        attachments	Archivos adjuntos(array) de archivos
        usePhpMail	Especifica si usa php mail para este envio (bool)
       */
      if ($email != '')
      {
        mdMailHandler::sendMail(array('recipients' => $email, 'sender' => array('name' => $mdMailXMLHandler->getFrom(), 'email' => $mdMailXMLHandler->getEmail()), 'subject' => $title, 'body' => $body, 'attachments' => array($facturaPdf)));
      }
    }

    public static function sendCobroEmail($cobro)
    {
      $cuenta = $cobro->getCuenta();
      $usuario = $cuenta->getCuentausuario()->getFirst()->getUsuario();
      $title = sprintf('Talon de cobro (%s/%s)', date('n'), date('Y'));//__('Mail_Talon de Pago');
      $mdMailXMLHandler = new mdMailXMLHandler();
      sfContext::getInstance()->getConfiguration()->loadHelpers(array('I18N', 'Partial'));
      $facturaPdf = cuenta::exportCobroToPdf($cobro, $cuenta, 'a');
      $body = get_partial('usuarios/newCobroMailing', array('usuario' => $usuario, 'cuenta' => $cuenta));
      $email = $usuario->getProgenitoresMails();

      /*
        recipients	Destinatarios	Requerido Puede ser un string de emails separados por coma o un array de emails.
        sender		Emisor		Requerido (array) con 'name' y 'email'
        subject		Asunto		Requerido (string)
        body 		Cuerpo 		REQUERIDO (string)
        replyTo		Setea el replyTo(string) email . Default
        attachments	Archivos adjuntos(array) de archivos
        usePhpMail	Especifica si usa php mail para este envio (bool)
       */
      if ($email != '')
      {
        mdMailHandler::sendMail(array('recipients' => $email, 'sender' => array('name' => $mdMailXMLHandler->getFrom(), 'email' => $mdMailXMLHandler->getEmail()), 'subject' => $title, 'body' => $body, 'attachments' => array($facturaPdf)));
      }
    }
    
    public function __toString() {
        return $this->getNombre() . ' ' . $this->getApellido();
    }

    public function getProgenitoresMails() {
        $emails = array();
        $padres = $this->getProgenitores();
        foreach ($padres as $padre) {
            if ($padre->getMail() != '') {
                array_push($emails, $padre->getMail());
            }
        }
        return $emails;
    }

    public function updateNewsletter($debug = false) {
        $padres_mails = $this->getProgenitoresMails();

        if (count($padres_mails) == 0)
            return $this;
        if($debug)
        {
            var_dump(sprintf('starting for user: %s [nombre: %s, apellido: %s, referencia: %s] [clase: %s, horario: %s]', $this->getId(), $this->getNombre(), $this->getApellido(), $this->getReferenciaBancaria(),  $this->getClase(), $this->getHorario()));
        }
        
        foreach ($this->getProgenitores() as $padre) {
            if ($padre->getMail() == '')
                continue;
                
            if($debug){
                var_dump(sprintf('---------- parent: %s [Nombre: %s][mail : %s ]', $padre->getMdUserId(), $padre->getNombre(), $padre->getMail()));
            }
            if ($padre->getMdUserId() == NULL) {
                if($debug){
                    var_dump(sprintf('creating parent for user %s ', $this->getId()));
                }
                try {
                    // Creo un mdUser
                    $mdUser = new mdUser();
                    $mdUser->setEmail($padre->getMail());
                    $mdUser->save();

                    $padre->setMdUserId($mdUser->getId());
                    $padre->save();
                } catch (Exception $e) {
                    continue;
                }
            } else {
                // Obtengo el mdUser
                $mdUser = $padre->getMdUser();
            }

            $mdUser->refresh();

            if ($mdUser->getMdNewsLetterUser()->count() > 0) {
                
                
                $mdNewsletterUser = $mdUser->getMdNewsLetterUser()->getFirst();

                $grupos = $mdNewsletterUser->getMdNewsLetterGroupUser();

                //lo elimino de todos los grupos
                foreach ($grupos as $grupoRelation) {
                    if($debug){
                        var_dump(sprintf('removing %s from group : %s', $mdUser->getId(), $grupoRelation->getMdNewsletterGroupId()));
                    }
                    $grupoRelation->delete();
                }
                
                $this->doSaveOnNewsletter($mdUser, $mdNewsletterUser, $this, $debug);
                foreach ($this->getHermanos() as $hermano_rel) {
                    $bro = $hermano_rel->getUserTo();
                    if($debug){
                        var_dump(sprintf('starting for brother: %s [nombre: %s, apellido: %s, referencia: %s] [clase: %s, horario: %s]', $bro->getId(), $bro->getNombre(), $bro->getApellido(), $bro->getReferenciaBancaria(),  $bro->getClase(), $bro->getHorario()));
                    }
                    $this->doSaveOnNewsletter($mdUser, $mdNewsletterUser, $bro, $debug);
                }
            }
        }
    }
    
    private function doSaveOnNewsletter($mdUser, $mdNewsletterUser, $student, $debug)
    {
        if ($student->getEgresado()) {
            if($debug){
                var_dump(sprintf('----------  ----------  User %s [es egresado]', $student->getId(), $this->getEgresado()));
            }
            $grupo = Doctrine::getTable('mdNewsLetterGroup')->findOneByName('EGRESADOS');
            if ($grupo) {
                
                if($debug){
                    var_dump(sprintf('----------  ---------- Parent %s [A Egresados]', $mdUser->getId()));
                }
                $userGroup = new mdNewsLetterGroupUser();
                $userGroup->setMdNewsletterUserId($mdNewsletterUser->getId());
                $userGroup->setMdNewsletterGroupId($grupo->getId());
                $userGroup->save();
            }

        } else {
            // si no es un alumno egresado - preguntar si es asi ????? -
            
            // Agrego el usuario al grupo PADRES
            $grupo = Doctrine::getTable('mdNewsLetterGroup')->findOneByName('PADRES');
            if ($grupo) {
                if($debug){
                    var_dump(sprintf('----------  ---------- Parent %s [A Padres]', $mdUser->getId()));
                }
                $userGroup = new mdNewsLetterGroupUser();
                $userGroup->setMdNewsletterUserId($mdNewsletterUser->getId());
                $userGroup->setMdNewsletterGroupId($grupo->getId());
                $userGroup->save();
            }
            
            // Agrego el usuario a la clase a la que pertenece
            if ($student->getClase() != "" && $student->getHorario() != "") {
                $grupo = Doctrine::getTable('mdNewsLetterGroup')->findOneByName($student->getClase() . ' (' . $student->getHorario() . ')');
                if ($grupo) {
                    if($debug){
                        var_dump(sprintf('----------  ---------- Parent %s [grupo : %s]', $mdUser->getId(), $student->getClase() . ' (' . $student->getHorario() . ')'));
                    }
                    $userGroup = new mdNewsLetterGroupUser();
                    $userGroup->setMdNewsletterUserId($mdNewsletterUser->getId());
                    $userGroup->setMdNewsletterGroupId($grupo->getId());
                    $userGroup->save();
                }
            }

            // Agrego el mdUser a los grupos correspondientes: Actividades Seleccionadas, Padres, clase
            $actividades = $student->getActividades();
            foreach ($actividades as $actividad) {
                if ($actividad->getMdNewsLetterGroupId() != NULL) {
                    $grupo = $actividad->getMdNewsLetterGroup();

                    if ($grupo) {
                        if($debug){
                            var_dump(sprintf('----------  ----------  Parent %s [Actividad: %s]', $mdUser->getId(), $actividad->getNombre()));
                        }
                        $userGroup = new mdNewsLetterGroupUser();
                        $userGroup->setMdNewsletterUserId($mdNewsletterUser->getId());
                        $userGroup->setMdNewsletterGroupId($grupo->getId());
                        $userGroup->save();
                    }
                }
            }
        }
    }

    public function preDelete($event){
        $hermanos = $this->getHermanos();
        if($hermanos->count() == 0)
        {
            $padres = $this->getProgenitores();
            foreach($padres as $padre)
            {
                $padre->delete();
            }
        }
    }
	
	public function postInsert($event) {
	  parent::postInsert($event);
	  $accountId = accountsHandler::createUsuarioAccount($this->getId(), $this->getReferenciaBancaria());
    if($accountId !== null)
    {
      hermanos::checkBrothersByAccounts($accountId);
      hermanos::checkAllParentsByBrothers();
    }
	}
    
  public function postSave($event) {
        parent::postSave($event);
		facturaHandler::generateUserBill($this, date('n'), date('Y'));
        //factura::updateUserBill($this, date('n'), date('Y'));
  }
  
  public static function getAllUsersWithoutParents($egresado = false)
  {
    return Doctrine::getTable('usuario')->getWithoutParents($egresado);
    //select * from usuario where id not in (select usuario_id from usuario_progenitor) and egresado = 0;
  }


}
