<?php

/**
 * PluginmdMediaYoutubeVideo
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
DEFINE('MDYOUTUVEVIDEOAVATAR_PATH', sfConfig::get('app_mdYoutubeVideoAvatar_path', sfConfig::get('sf_upload_dir') . '/media/mdYoutubeVideoAvatar'));

abstract class PluginmdMediaYoutubeVideo extends BasemdMediaYoutubeVideo implements mdMediaContentInterface
{

    public $priority = -1;

    public $mdUserIdTmp = 0;
    
    private $_metadata = null;

    const PATH = MDYOUTUVEVIDEOAVATAR_PATH;

    /**
     * Devuelve el nombre de la clase: mdMediaImage
     * @return <string>
     */
    public function getObjectClass()
    {
        return get_class($this);
    }



    public function retrieveYoutubeCode()
    {
        /*preg_match(
        '/[\\?\\&]v=([^\\?\\&]+)/',
            'http://www.youtube.com/watch?v=OzHvVoUGTOM&feature=channel',
            $matches
        );*/
        // $matches[ 1 ] should contain the youtube id
        //print_r($matches);
        preg_match(
        '/[\\?\\&]v=([^\\?\\&]+)/',
            $this->getSrc(),
            $matches
        );
        // $matches[ 1 ] should contain the youtube id
        if(!isset($matches[1]))
            throw new Exception("The youtebe url is invalid", 1001);
        return $matches[1];
    }

    public function assignYoutubeCode()
    {
        $this->setCode($this->retrieveYoutubeCode());
    }

    public function retrieveMetaData()
    {
      if(is_null($this->_metadata))
      {
        //
        $url = "http://gdata.youtube.com/feeds/api/videos/".$this->getCode();
        $xml = simplexml_load_file($url);
        $children = $xml->children("http://www.w3.org/2005/Atom");
        $stdObject = new stdClass();
        $stdObject->title = (string)$children->title;
        $stdObject->published = (string)$children->published;
        $stdObject->content = (string)$children->content;
        $stdObject->author = (string)$children->author->name;
        $this->_metadata = $stdObject;
        //
      }
      return $this->_metadata;
    }
    
    public function  preSave($event) {
        parent::preSave($event);
        if($this->isNew())
        {
            $this->assignYoutubeCode();
            $metadata = $this->retrieveMetaData();
            $this->setName($metadata->title);
        }
    }

    public function getObjectUrl($options = array())
    {
      return "http://img.youtube.com/vi/".$this->getCode()."/0.jpg";
    }
    
    public function retrieveEmbeddedCode($options = array())
    {
        $width = 480;
        $height = 390;
        if(isset($options['width'])) $width = $options['width'];
        if(isset($options['height'])) $height = $options['height'];
        $code = '<iframe title="YouTube video player" width="'.$width.'" height="'.$height.'" src="http://www.youtube.com/embed/'.$this->getCode().'" frameborder="0" allowfullscreen></iframe>';
        return $code;
    }
    
    public function getObjectSource()
    {
      return "";
    }
    
    public function isVideo()
    {
      return true;
    }    
}
