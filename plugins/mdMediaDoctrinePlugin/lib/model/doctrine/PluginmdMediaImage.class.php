<?php

/**
 * PluginmdMediaImage
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class PluginmdMediaImage extends BasemdMediaImage implements mdMediaContentInterface
{

    public $priority = -1;
    
    public $mdUserIdTmp = 0;

    public $mdNameSpaceIdTmp = 0;

    /**
     * Devuelve el nombre de la clase: mdMediaImage
     * @return <string>
     */
    public function getObjectClass()
    {
        return get_class($this);
    }

    /**
     * Devuelve el src de la imagen
     * @return <string>
     */
    public function getObjectSource()
    {
        return $this->getPath() . $this->getFilename();
    }

    public function getObjectUrl($options = array())
    {
        return mdWebImage::getUrl($this->getObjectSource(), $options);
    }

    public function preDelete($event) {
        $path = sfConfig::get('app_mdImageFileHandler_path', sfConfig::get('sf_upload_dir'));
        $path .= $this->getPath();
        try{
            MdFileHandler::delete($this->getFilename(), $path);
        }catch(Exception $e)
        {
            sfContext::getInstance()->getLogger()->err("Error al borrar: ".$path.$this->getFilename());
            sfContext::getInstance()->getLogger()->err($e->getMessage());
        }
    }
    /*
    public function postDelete($event)
    {
      if(class_exists("mdReporAbuseHandler"))
      {
        mdReporAbuseHandler::deactivateAbuseOfObject($this->getId(), $this->getObjectClass()); 
      }
    }
    */
    public function getDownloadSource()
    {
        return $this->getPath() . $this->getFilename();
    }

    public function getFileType()
    {
        $path_info = pathinfo ( $this->getObjectSource() );
        return $path_info ["extension"];
    }
    
    public function getOwnerIdForAbuseReport()
    {
      return $this->retrieveMdMediaContent()->getOwnerIdForAbuseReport();
    }
    
    public function isVideo()
    {
      return false;
    }
}
