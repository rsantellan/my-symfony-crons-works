<?php

/**
 * PluginmdMediaAlbum
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class PluginmdMediaAlbum extends BasemdMediaAlbum
{
    const VIDEOS    = 'Video';

    const IMAGES    = 'Image';

    const FILES     = 'File';

    const MIXED     = 'Mixed';

    const YOUTUBEVIDEOS = "youtube";
    
    const VIMEO     = "vimeo";    

    const AVATAR_ALBUM_DEFAULT = '/mdMediaDoctrinePlugin/images/no_image.jpg';

    /**
     * Guarda la coleccion de los mdMediaContent que contiene el album.
     * Es utilizado para guardar la referencia a los objetos cuando se elimina
     * el album
     * 
     * @var <array>
     */
    private $mdMediaContents = array();


    public function getObjectClass()
    {
        return get_class($this);
    }

    public function getObjectId()
    {
        return $this->getId();
    }
    
    public function preDelete($event)
    {
        Md_Cache::$_use_cache = false;
        $mdMediaAlbumContents = $this->getMdMediaAlbumContent();
        foreach($mdMediaAlbumContents as $mdMediaAlbumContent)
        {
            $this->mdMediaContents[] = $mdMediaAlbumContent->getMdMediaContent();
            $mdMediaAlbumContent->delete();
        }
    }

    public function postDelete($event)
    {
        foreach($this->mdMediaContents as $mdMediaContent)
        {
            $mdMediaContent->retrieveObject()->delete();
        }
        $this->cleanCache();
        Md_Cache::$_use_cache = true;
        if(class_exists("mdNewsfeedHandler"))
        {
          mdNewsfeedHandler::deleteObjectNewsFeeds($this->getId(), $this->getObjectClass());
        }	  
    }

    public function postSave($event)
    {
        $this->cleanCache();
    }

    private function cleanCache()
    {
        if(sfConfig::get('sf_driver_cache'))
        {
            $manager = Doctrine_Manager::getInstance()->getAttribute(Doctrine_Core::ATTR_RESULT_CACHE);
            //Eliminar mdMediaContent del cache. Es mas eficiente usar el delete para borrar.
            $key1 = sfConfig::get('sf_root_dir').  '_' . $this->getTable()->getTableName() . '_' . $this->getMdMediaId() . '_' . Doctrine_Core::HYDRATE_ARRAY;
            $key2 = sfConfig::get('sf_root_dir').  '_' . $this->getTable()->getTableName() . '_' . $this->getMdMediaId() . '_' . Doctrine_Core::HYDRATE_RECORD;
            $key3 = sfConfig::get('sf_root_dir').  '_' . $this->getTable()->getTableName() . '_' . $this->getMdMediaId() . '-' . $this->getId() . '_' . Doctrine_Core::HYDRATE_ARRAY;
            $key4 = sfConfig::get('sf_root_dir').  '_' . $this->getTable()->getTableName() . '_' . $this->getMdMediaId() . '-' . $this->getId() . '_' . Doctrine_Core::HYDRATE_RECORD;
            $key5 = sfConfig::get('sf_root_dir').  '_md_media_album_content_' . $this->getId();
            $key6 = sfConfig::get('sf_root_dir').  '_md_media_content_IDS_';
            $manager->delete($key1);
            $manager->delete($key2);
            $manager->delete($key3);
            $manager->delete($key4);
            $manager->delete($key5);
            $manager->deleteByPrefix($key6);
        }
    }

    /**
     * Adds a content to an album
     *
     * @param $content
     * @author Gaston Caldeiro
     */
    public function addContent($contentConcrete)
    {
        $mdMediaContent = $contentConcrete->retrieveMdMediaContent();
        $albumContentAux = Doctrine::getTable('mdMediaAlbumContent')->find(array($this->getId(), $mdMediaContent->getId()));
        if($albumContentAux) return false;
        $albumContent = new mdMediaAlbumContent();
        $albumContent->setMdMediaAlbumId($this->getId());
        
        $albumContent->setMdMediaContentId($mdMediaContent->getId());
        $albumContent->setObjectClassName($contentConcrete->getObjectClass());
        $albumContent->save();
        if($this->getMdMediaContentId() == null || $this->getMdMediaContentId() == 0){
            /*$this->setMdMediaContentId($mdMediaContent->getId());
            $this->save();*/
            $this->saveAlbumAvatar($mdMediaContent->getId());
        }
        $this->cleanCache();
    }

    private function saveAlbumAvatar($mdMediaContentId)
    {
      $this->setMdMediaContentId($mdMediaContentId);
      $this->save();
      if($this->getTitle() == "default")
      {
        $mdMedia = $this->getMdMedia();
        if($mdMedia->getObjectClassName() == "mdUserProfile")
        {
          $src = NULL;
          if(!is_null($mdMediaContentId))
          {
            $mdMediaContent = Doctrine::getTable("mdMediaContent")->find($mdMediaContentId);
            $object = $mdMediaContent->retrieveObject();
            $src = $object->getObjectSource();          
          }
          mdUserSearchHandler::saveAvatar($src, $mdMedia->getObjectId());
        }
      }
    }
    /**
     * Elimina el contenido concreto del album
     *
     * @param <type> $contentConcrete
     * @author Gaston Caldeiro
     */
    public function removeContent($contentConcrete)
    {
        $mdMediaContent = $contentConcrete->retrieveMdMediaContent();
        $albumContent = Doctrine::getTable('mdMediaAlbumContent')->find(array($this->getId(), $mdMediaContent->getId()));
        $albumContent->delete();
        if($this->getMdMediaContentId() == $mdMediaContent->getId())
        { //si es el avatar
            $contentIds = self::retrieveContentIds($this->getId());
            $contentId = (count($contentIds) > 0 ? $contentIds[0] : NULL);
            $this->saveAlbumAvatar($contentId);
            
            $mdMedia = $this->getMdMedia();
            if($mdMedia->getObjectClassName() == "mdUserProfile")
            {
              $src = NULL;
              if(!is_null($contentId))
              {
                $mdMediaContent = Doctrine::getTable("mdMediaContent")->find($mdMediaContentId);
                $object = $mdMediaContent->retrieveObject();
                $src = $object->getObjectSource();          
              }
              mdUserSearchHandler::saveAvatar($src, $mdMedia->getObjectId());
            }            
        }
        $this->cleanCache();
    }

    /**
     * Cambia el avatar del album, recibe el mdMediaContentId
     *
     * @param <integer> $avatarId
     * @author Gaston Caldeiro
     */
    public function changeAvatar($avatarId)
    {
        /*$this->setMdMediaContentId($avatarId);
        $this->save();*/
        $this->saveAlbumAvatar($avatarId);
    }

    /**
     * Devuelve todos identificadores de los mdMediaContent del album
     *
     * @return <array>     *
     * @author Gaston Caldeiro
     */
    public static function retrieveContentIds($albumId, $filter = mdMediaManager::MD_FILTER_PRIORITY)
    {
        $contentIds = array();
        $contents = Doctrine::getTable('mdMediaAlbumContent')->retrieveContentIds($albumId, 86400, $filter);
        foreach ($contents as $dataId)
        {
            $contentIds[] = (int)$dataId[0];
        }
        return $contentIds;
    }

    /**
     *
     * @param <type> $contentIds
     * @return <array>
     * @author Gaston Caldeiro
     */
    public static function retrieveItems($contentIds, $key = NULL)
    {
        $items = array();

        if($key != NULL){
            if($key == mdMediaManager::MIXED){

                $mdMediaContents = Doctrine::getTable('mdMediaContent')->retrieveMdMediaContents($contentIds, 86400, Doctrine_Core::HYDRATE_RECORD);

            } elseif($key == mdMediaManager::IMAGES){

                $mdMediaContents = Doctrine::getTable('mdMediaContent')->retrieveMdMediaContents($contentIds, 86400, Doctrine_Core::HYDRATE_RECORD, 'mdMediaImage');

            } elseif($key == mdMediaManager::VIDEOS){

                $mdMediaContents = Doctrine::getTable('mdMediaContent')->retrieveMdMediaContents($contentIds, 86400, Doctrine_Core::HYDRATE_RECORD, 'mdMediaVideo');

            } elseif($key == mdMediaManager::FILES){

                $mdMediaContents = Doctrine::getTable('mdMediaContent')->retrieveMdMediaContents($contentIds, 86400, Doctrine_Core::HYDRATE_RECORD, 'mdMediaFile');

            } elseif($key == mdMediaManager::YOUTUBEVIDEOS)
            {
                $mdMediaContents = Doctrine::getTable('mdMediaContent')->retrieveMdMediaContents($contentIds, 86400, Doctrine_Core::HYDRATE_RECORD, 'mdMediaYouTubeVideo');
            } elseif($key == mdMediaManager::VIMEO)
            {
                $mdMediaContents = Doctrine::getTable('mdMediaContent')->retrieveMdMediaContents($contentIds, 86400, Doctrine_Core::HYDRATE_RECORD, 'mdMediaVimeoVideo');
            } elseif($key == mdMediaManager::ALL)
            {
              $mdMediaContents = Doctrine::getTable('mdMediaContent')->retrieveMdMediaContents($contentIds, 86400, Doctrine_Core::HYDRATE_RECORD);
            }
        } else {

            $mdMediaContents = Doctrine::getTable('mdMediaContent')->retrieveMdMediaContents($contentIds, 86400, Doctrine_Core::HYDRATE_RECORD);

        }

        foreach($mdMediaContents as $mdMediaContent)
        {
            $keys = array_keys($contentIds, $mdMediaContent->getId());
            $priority = array_pop($keys);
            $mdMediaContentConcrete = $mdMediaContent->retrieveObject();
            $mdMediaContentConcrete->savePriority($priority);
            $items[] = $mdMediaContentConcrete;
        }
        
        return $items;

        /*if($key == mdMediaManager::MIXED)
        {
            $keys = array(mdMediaManager::IMAGES, mdMediaManager::FILES);
            $items = array();
            foreach ($keys as $k)
            {
                $collection = Doctrine::getTable('mdMediaAlbum')->findItemsByContentIds($contentIds, $k);
                foreach($collection as $mdObject)
                {
                    $items[] = $mdObject;
                }
            }
            return $items;
        }

        return Doctrine::getTable('mdMediaAlbum')->findItemsByContentIds($contentIds, $key);*/
    }

    /**
     *
     * @param <type> $contentId
     * @return <array>
     * @author Gaston Caldeiro
     */
    public static function retrieveMdContentConcrete($contentId)
    {
        $mdMediaContent = Doctrine::getTable('mdMediaContent')->retrieveMdMediaContents(array($contentId), 86400, Doctrine_Core::HYDRATE_RECORD)->getFirst();
        if(!$mdMediaContent) throw new Exception('Not exist mdMediaContent for id ' . $contentId, 100);
        return $mdMediaContent->retrieveObject();
    }

    public function serializeReferences($bool=null) { return true; }
}
